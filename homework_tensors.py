# -*- coding: utf-8 -*-
"""homework_tensors.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lKH5jsdXgCnzsdS2rb-_OCY3Eyq5D-BG
"""

!python -m venv UrFan

!.\UrFan\Scripts\activate

!pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118

import torch as t
import math

"""## 1.1 Создание тензоров"""

# - Тензор размером 3x4, заполненный случайными числами от 0 до 1
tensor3x4 = t.randint(2, (3, 4))
print('tensor3x4\n', tensor3x4)
# - Тензор размером 2x3x4, заполненный нулями
zeros_tensor2x3x4 = t.zeros(2, 3, 4)
print('zeros_tensor2x3x4\n', zeros_tensor2x3x4)
# - Тензор размером 5x5, заполненный единицами
ones_tensor_5x5 = t.ones(5, 5)
print('ones_tensor5x5\n', ones_tensor_5x5)
# - Тензор размером 4x4 с числами от 0 до 15 (используйте reshape)
tensor4x4 = t.randint(16, (2, 8)).reshape(4, 4)
print('tensor4x4\n', tensor4x4)

"""## 1.2 Операции с тензорами"""

A = t.randint(11, (3, 4))
B = t.randint(11, (4, 3))
print('A\n', A)
print('B\n', B)
# - Транспонирование тензора A
transp_tensor_A = A.T
print('transp_tensor_A\n', transp_tensor_A)
# - Матричное умножение A и B
mult_AB_tensor = A @ B
print('mult_AB_tensor\n', mult_AB_tensor)
# - Поэлементное умножение A и транспонированного B
mult_ABtransp_tensor = A * B.T
print('mult_AandBtrans_tensor\n', mult_ABtransp_tensor)
# - Вычислите сумму всех элементов тензора A
sum_A = A.sum()
print('sum_A\n', sum_A)

"""## 1.3 Индексация и срезы"""

tensor5x5x5 = t.randint(11, (5, 5, 5))
print('tensor5x5x5\n', tensor5x5x5)
# - Первую строку
first_string = tensor5x5x5[:1, :1, :]
print('first_string\n', first_string)
# - Последний столбец
last_column = tensor5x5x5[-1:, :, -1:]
print('last_column\n', last_column)
# - Подматрицу размером 2x2 из центра тензора
center_2x2 = tensor5x5x5[2, 1:3, 1:3]
print('center_2x2\n', center_2x2)
# - Все элементы с четными индексами
even_elements = tensor5x5x5[::2, ::2, ::2]
print('even_elements\n', even_elements)

"""## 1.4 Работа с формами"""

# Создайте тензор размером 24 элемента
tensor1x24 = t.randint(11, (24, ))
print('tensor1x24\n', tensor1x24)
# Преобразуйте его в формы:
# - 2x12
tensor2x12 = tensor1x24.reshape(2, 12)
print('tensor_2x12\n', tensor2x12)
# - 3x8
tensor3x8 = tensor1x24.reshape(3, 8)
print('tensor3x8\n', tensor3x8)
# - 4x6
tensor4x6 = tensor1x24.reshape(4, 6)
print('tensor4x6\n', tensor4x6)
# - 2x3x4
tensor2x3x4 = tensor1x24.reshape(2, 3, 4)
print('tensor2x3x4\n', tensor2x3x4)
# - 2x2x2x3
tensor2x2x2x3 = tensor1x24.reshape(2, 2, 2, 3)
print('tensor2x2x2x3\n', tensor2x2x2x3)